{"version":3,"sources":["Styles/styles.ts","Components/Button/styles.ts","Components/Button/index.tsx","Components/Inputs/styles.ts","Components/Inputs/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TabWrapper","styled","div","props","time","colors","ControlContainer","SpeedContainer","ButtonContainer","width","color","Button","children","type","onClick","className","InputContainer","Input","onChange","otherProps","App","useState","0","1","2","setColors","speed","setSpeed","blinkSpeed","setBlinkSpeed","setSpeedValue","e","console","log","Inputs","target","value","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e4b1718.chunk.js","sourcesContent":["import styled, { css, keyframes } from 'styled-components'\r\n\r\ninterface MyProps{\r\n  colors: Array<string>,\r\n  time: string,\r\n}\r\n\r\nexport const TabWrapper = styled.div`\r\n background-color: white;\r\n height: 100vh;\r\n width: 100vw;\r\n display: flex;\r\n flex-direction: column;\r\n align-items: center;\r\n justify-content: center;\r\n animation: teste ${(props: MyProps) => props.time} linear 0s infinite alternate;\r\n background-color: ${(props: MyProps) => props.colors[0]};\r\n  \r\n @keyframes teste {\r\n  0% {background-color: ${(props: MyProps) => props.colors[0]};}\r\n 25%  {background-color: ${(props: MyProps) => props.colors[1]};}\r\n 50%  {background-color: ${(props: MyProps) => props.colors[2]};}\r\n 100% {background-color: ${(props: MyProps) => props.colors[3]};}\r\n }\r\n\r\n`;\r\n \r\nexport const ControlContainer = styled.div`\r\n  display: flex;\r\n  border: 1px solid black;\r\n  width: fit-content;\r\n  height: fit-content;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n`;\r\n\r\nexport const SpeedContainer = styled.div`\r\n  display: flex;\r\n  \r\n`\r\n\r\n\r\n","import styled from \"styled-components\"\r\n\r\n\r\ninterface IBtnProps {\r\n  width?: number;\r\n  color?: string;\r\n}\r\n\r\nexport const ButtonContainer = styled.div`\r\n  display: flex;\r\n  .btn{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: ${(props:IBtnProps ) => props.width ? props.width : '100px'};\r\n    height: 40px;\r\n    border: none;\r\n    border-radius: 8px;\r\n    background-color: ${(props:IBtnProps ) => props.color ? props.color : 'grey'};\r\n    color: white;\r\n    cursor: pointer;\r\n    box-shadow: 0px 0px 1px rgba(0,0,0,0.25);\r\n  }\r\n  .btn-speed{\r\n    height: 32px;\r\n    width: 20px;\r\n    padding: 0;\r\n    border-radius: 0;\r\n  }\r\n\r\n  .btn:hover{\r\n    opacity: 0.9;\r\n  }\r\n\r\n`\r\n\r\nexport const Teste = styled.div`\r\n  display: flex;\r\n`","import React from 'react'\r\nimport {ButtonContainer} from './styles'\r\n\r\ninterface IButtonProps{\r\n  children?: any;\r\n  width?: number;\r\n  color?: string;\r\n  type?: string;\r\n  onClick?: any;\r\n}\r\n\r\n\r\nconst Button = (props: IButtonProps) => {\r\n\r\n  const { children, width, color, type, onClick } = props;\r\n\r\n  return type === 'speed' ? (\r\n  <ButtonContainer>\r\n      <button className=\"btn btn-speed\" onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  </ButtonContainer> \r\n  ):(\r\n    <ButtonContainer>\r\n        <button className=\"btn\" onClick={onClick}>\r\n        {children}\r\n      </button>\r\n    </ButtonContainer>\r\n  )\r\n}\r\n\r\nexport default Button\r\n","import styled from \"styled-components\"\r\n\r\n\r\ninterface IInputProps {\r\n  width?: number;\r\n  color?: string;\r\n}\r\n\r\nexport const InputContainer = styled.div`\r\n  display: flex;\r\n  .input{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: ${(props:IInputProps ) => props.width ? props.width : '32px'};\r\n    height: 32px;\r\n    border: none;\r\n    border-radius: 50%;\r\n    color: white;\r\n    cursor: pointer;\r\n    box-shadow: 0px 0px 1px rgba(0,0,0,0.25);\r\n    margin-left: 5px;\r\n\r\n  }\r\n\r\n  input[type=\"color\"] {\r\n\t-webkit-appearance: none;\r\n\tborder: none;\r\n\twidth: 28px;\r\n\theight: 28px;\r\n  border-radius: 50%;\r\n}\r\ninput[type=\"color\"]::-webkit-color-swatch-wrapper {\r\n\tpadding: 0;\r\n  border-radius: 50%;\r\n}\r\ninput[type=\"color\"]::-webkit-color-swatch {\r\n\tborder: none;\r\n  border-radius: 50%;\r\n}\r\n\r\n  .input::after{\r\n    border-radius: 50%;\r\n  }\r\n`\r\n\r\nexport const Teste = styled.div`\r\n  display: flex;\r\n`","import React from 'react'\r\nimport { InputContainer } from './styles';\r\n\r\ninterface IInputProps{\r\n  width?: string;\r\n  onChange?: any;\r\n}\r\n\r\n\r\nconst Input = (props: IInputProps) => {\r\n\r\n  const { width, onChange, ...otherProps } = props;\r\n\r\n  return (\r\n    <InputContainer>\r\n      <input type=\"color\" className=\"input\" onChange={onChange} {...otherProps} />\r\n    </InputContainer>\r\n  )\r\n}\r\n\r\nexport default Input\r\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MaterialTable from 'material-table';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Slider from '@material-ui/core/Slider';\nimport Teste from './Teste'\nimport {ControlContainer, SpeedContainer, TabWrapper} from './Styles/styles'\nimport Button from './Components/Button';\nimport Inputs from './Components/Inputs';\n\nfunction App() {\n\n  let [bgColor,setBgColor] = useState('white')\n  let [timeFrames, setTime] = useState(1000)\n  let [colors, setColors] = useState({0: 'white',1: 'white', 2: 'white'})\n\n  let cont = 0;\n  let cores = ['red','green','blue'];\n\n  function colorOne (e:any){\n    console.log(e.target.value)\n    setColors({...colors, 0 : e.target.value.toString()})\n  }\n  function colorTwo(e:any) {\n    console.log(e.target.value)\n    setColors({...colors,1 : e.target.value.toString()})\n  }\n  function colorThree(e:any) {\n    console.log(e.target.value)\n    setColors({...colors,2 : e.target.value.toString()})\n  }\n\n  let [speed, setSpeed] = useState(1);\n  let [blinkSpeed, setBlinkSpeed] = useState(100);\n\n  function setSpeedValue (e: string){\n    if (e === 'sum'){\n      setSpeed(speed+=1)\n    }\n    else{\n      if (speed === 1){\n        setSpeed(1)\n      }else{\n        setSpeed(speed -= 1)\n      }\n      \n    }\n    setBlinkSpeed(speed * blinkSpeed)\n    console.log('velocidade: ', speed * blinkSpeed)\n  }\n\n  return (\n    <TabWrapper className=\"App-header\" time={`${blinkSpeed}ms`} colors={[colors[0], colors[1], colors[2], colors[2]]} >\n\n      <ControlContainer>\n\n          <Button>\n            Hide menu\n          </Button>\n\n        <Inputs onChange={colorOne}/>\n        <Inputs onChange={colorTwo}/>\n        <Inputs onChange={colorThree}/>\n        \n\n        <SpeedContainer>\n          <p>Blink speed</p>\n          <Button type=\"speed\" onClick={() => setSpeedValue('minus')}>+</Button>\n          <Button type=\"speed\" onClick={() => setSpeedValue('sum')} >-</Button>\n        </SpeedContainer>\n      </ControlContainer>\n\n    </TabWrapper>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}